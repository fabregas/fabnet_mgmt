#!/usr/bin/python
import os
import sys
import yaml
import getpass
import random
import string
from optparse import OptionParser

from fabnet.core.key_storage import KeyStorage

from fabnet_mgmt.engine.mgmt_db import MgmtDatabaseManager
from fabnet_mgmt.engine.management_engine_api import ManagementEngineAPI
from fabnet_mgmt.engine.exceptions import *
from fabnet_mgmt.engine.constants import *

from pymongo import MongoClient
from pymongo.errors import ConnectionFailure, ConfigurationError

MGMT_CONFIG_FILE = '.fabnet_mgmt_db_uri'

def get_section(obj, section, exception=True, name=''):
    data = obj.get(section, None)
    if data is None and exception:
        raise Exception('Section "%s" does not found in installation file!'%(name+section or section))
    return data

def parse_install_file(file_path):
    if not os.path.exists(file_path):
        raise Exception('File does not found at %s'%file_path)

    f_obj = None
    try:
        f_obj = open(file_path)
        data = yaml.load(f_obj)
    except Exception, err:
        raise Exception('Parse %s file error: %s'%(file_path, err))
    finally:
        if f_obj:
            f_obj.close()

    cluster_info = get_section(data, 'cluster_info')
    get_section(cluster_info, 'name', name='cluster_info.')
    get_section(cluster_info, 'node_nums_count', name='cluster_info.')

    ca_info = get_section(data, 'ca', exception=False)
    if ca_info:
        get_section(ca_info, 'database_conn_str')

    node_types = get_section(data, 'node_types')
    if type(node_types) != dict:
        raise Exception('Invalid node types in installation file!')
    for node_type, nt_data in node_types.items():
        get_section(nt_data, 'release_url', name='node_types.%s.'%node_type)

    p_nodes_list = get_section(data, 'physical_nodes')
    if type(p_nodes_list) != list:
        raise Exception('Invalid physical nodes list in installation file!')

    nodes_list = get_section(data, 'fabnet_nodes')
    if type(nodes_list) != list:
        raise Exception('Invalid fabnet nodes list in installation file!')
    for i, node in enumerate(nodes_list):
        get_section(node, 'ssh_host', name='nodes[%s].'% i)
        get_section(node, 'fabnet_addr', name='nodes[%s].'% i)
        get_section(node, 'node_type', name='nodes[%s].'% i)

    return cluster_info, ca_info, node_types, p_nodes_list, nodes_list
    
def reset_cluster(mgmt_db_url):
    try:
        client = MongoClient(mgmt_db_url)
        mgmt_db = client.get_default_database()
        db_name = mgmt_db.name
    except ConfigurationError:
        db_name = MgmtDatabaseManager.MGMT_DB_NAME
    client.drop_database(db_name)

def install_cluster(mgmt_db_url, install_file_path, mgmt_ks_path, mgmt_ks_pwd='', is_upgrade=False):
    cluster_info, ca_info, node_types, \
            p_nodes_list, nodes_list = parse_install_file(install_file_path)

    if ca_info:
        ca_db_conn_str = ca_info['database_conn_str']
    else:
        ca_db_conn_str = None

    dbm = MgmtDatabaseManager(mgmt_db_url)
    if ca_db_conn_str and not mgmt_ks_path:
        raise Exception('Management key storage is expected for secured installation!')

    if is_upgrade:
        print('========= Upgrading an existing cluster =========')
    else:
        print('========= Initial cluster configuration =========')
        ManagementEngineAPI.initial_configuration(dbm, cluster_info['name'], \
                mgmt_ks_path, ca_db_conn_str, cluster_info['node_nums_count'])
    
    try:
        mgmt_api = ManagementEngineAPI(dbm, init_scheduler=False)
        if mgmt_ks_path:
            mgmt_api.init_key_storage(mgmt_ks_pwd)

        if not is_upgrade:
            session_id = mgmt_api.authenticate('admin', 'admin')

            roles = [ROLE_UM, ROLE_NM, ROLE_CF, ROLE_SS, ROLE_UPGR, ROLE_RO]
            tmp_pwd = ''.join(random.choice(string.uppercase+string.digits) for i in xrange(15))

            new_password = getpass.getpass('Enter new admin password: ')
            if len(new_password) < 5:
                raise Exception('Password is too short!')
            pwd_confirm = getpass.getpass('Confirm new admin password: ')
            if new_password != pwd_confirm:
                raise Exception('Passwords are not equal!')

            mgmt_api.change_user_roles(session_id, 'admin', roles)
            mgmt_api.change_user_password(session_id, 'admin', new_password)
            mgmt_api.logout(session_id)
        else:
            new_password = getpass.getpass('Enter new admin password: ')

        session_id = mgmt_api.authenticate('admin', new_password)

        for node_type, nt_data in node_types.items():
            release_url = nt_data['release_url']
            mgmt_api.set_release(session_id, node_type, release_url)

        if cluster_info.has_key('config'):
            mgmt_api.set_config(session_id, None, cluster_info['config'])

        print('=========             Done              =========\n')

        print('=========  Physical nodes installation  =========')
        nodes = mgmt_api.show_nodes(session_id, filters={'physical': True})
        ph_nodes = [node[DBK_ID] for node in nodes] 
        for node in p_nodes_list:
            for node_host, n_data in node.items():
                if node_host in ph_nodes:
                    print('  ** physical node %s is already installed!'%node_host)
                    continue

                print('  --> configuring physical node at %s ...'%node_host)
                mgmt_api.install_physical_node(session_id, \
                        '%s:%s'%(node_host, n_data.get('ssh_port', '22')), \
                        n_data.get('ssh_user', 'root'), \
                        n_data.get('ssh_password', None), \
                        n_data.get('ssh_key', None))
                ph_nodes.append(node_host)
        print('=========             Done              =========\n')

        print('=========   Fabnet nodes installation   =========')
        nodes = mgmt_api.show_nodes(session_id, filters={'physical': False})
        fb_nodes = [node[DBK_NODEADDR] for node in nodes] 
        for node in nodes_list:
            if node['fabnet_addr'] in fb_nodes:
                print('  ** fabnet node for address %s is already installed!'%node['fabnet_addr'])
                continue

            print('  --> installing node at %s ...'%node['fabnet_addr'])
            node_name = mgmt_api.install_fabnet_node(session_id, node['ssh_host'], \
                    node['node_type'], node['fabnet_addr'], \
                    force_sw_upgrade = not is_upgrade)
            
            if node.has_key('config'):
                mgmt_api.set_config(session_id, node_name, node['config'])

            print('  --> installed %s node.'%node_name)
        print('=========             Done              =========')

        mgmt_api.logout(session_id)
        mgmt_api.destroy()
    except Exception, err:
        if not is_upgrade:
            print('=========         Reset cluster         =========')
            reset_cluster(mgmt_db_url)
            print('=========             Done              =========')
        raise err

def save_mgmt_db_url(mgmt_db_url):
    home = os.environ.get('HOME', '/')
    open(os.path.join(home, MGMT_CONFIG_FILE), 'w').write(mgmt_db_url)

def get_mgmt_db_url():
    home = os.environ.get('HOME', '/')
    cfg = os.path.join(home, MGMT_CONFIG_FILE)
    if not os.path.exists(cfg):
        return 'localhost'
    return open(cfg).read().strip()


if __name__ == '__main__':
    parser = OptionParser()
    parser.add_option("-y", "--yaml", dest="yaml_path",
                    help="path to YAML for installation")
    parser.add_option("-k", "--ks", dest="ks_path",
                    help="path to management key storage (expected for secured installation)")
    parser.add_option("-d", "--mgmt-db", dest="db_str",
                    help="management database URI (save into $HOME/%s)"%MGMT_CONFIG_FILE)
    parser.add_option("-u", "--upgrade", dest="upgrade",
                    action="store_true", default=False,
                    help="upgrade existing cluster")

    (options, args) = parser.parse_args()

    if not options.yaml_path:
        parser.print_help()
        sys.exit(1)

    try:
        if not os.path.exists(options.yaml_path):
            raise Exception('YAML file does not found at %s'%options.yaml_path)

        if options.upgrade:
            if options.ks_path:
                raise Exception('Management key storage can not be replaced!')

            options.ks_path = True
            ks_pwd = getpass.getpass('Management key storage password: ')
        elif options.ks_path:
            if not os.path.exists(options.ks_path):
                raise Exception('Management key storage does not found at %s'%options.ks_path)
            ks_pwd = getpass.getpass('Management key storage password: ')
            KeyStorage(options.ks_path, ks_pwd)
        else:
            ks_pwd = None
        
        mgmt_db_url = options.db_str or 'localhost'

        install_cluster(mgmt_db_url, options.yaml_path, options.ks_path, ks_pwd, options.upgrade)

        save_mgmt_db_url(mgmt_db_url)
    except Exception, err:
        sys.stderr.write('ERROR! %s\n'%err)
        sys.exit(1)
    finally:
        pass

    sys.exit(0)
